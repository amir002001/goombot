// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "encoding/json"
import "fmt"

type ConfigSchemaJson struct {
	// Goombis corresponds to the JSON schema field "goombis".
	Goombis []ConfigSchemaJsonGoombisElem `json:"goombis" yaml:"goombis" mapstructure:"goombis"`

	// Goombot corresponds to the JSON schema field "goombot".
	Goombot ConfigSchemaJsonGoombot `json:"goombot" yaml:"goombot" mapstructure:"goombot"`
}

type ConfigSchemaJsonGoombisElem struct {
	// EmbedColor corresponds to the JSON schema field "embed_color".
	EmbedColor string `json:"embed_color" yaml:"embed_color" mapstructure:"embed_color"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// ThumbnailUrl corresponds to the JSON schema field "thumbnail_url".
	ThumbnailUrl string `json:"thumbnail_url" yaml:"thumbnail_url" mapstructure:"thumbnail_url"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfigSchemaJsonGoombisElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["embed_color"]; raw != nil && !ok {
		return fmt.Errorf("field embed_color in ConfigSchemaJsonGoombisElem: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in ConfigSchemaJsonGoombisElem: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in ConfigSchemaJsonGoombisElem: required")
	}
	if _, ok := raw["thumbnail_url"]; raw != nil && !ok {
		return fmt.Errorf("field thumbnail_url in ConfigSchemaJsonGoombisElem: required")
	}
	if _, ok := raw["url"]; raw != nil && !ok {
		return fmt.Errorf("field url in ConfigSchemaJsonGoombisElem: required")
	}
	type Plain ConfigSchemaJsonGoombisElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ConfigSchemaJsonGoombisElem(plain)
	return nil
}

type ConfigSchemaJsonGoombot struct {
	// BotAuthToken corresponds to the JSON schema field "bot_auth_token".
	BotAuthToken string `json:"bot_auth_token" yaml:"bot_auth_token" mapstructure:"bot_auth_token"`

	// GuildId corresponds to the JSON schema field "guild_id".
	GuildId string `json:"guild_id" yaml:"guild_id" mapstructure:"guild_id"`

	// StandupChannelId corresponds to the JSON schema field "standup_channel_id".
	StandupChannelId string `json:"standup_channel_id" yaml:"standup_channel_id" mapstructure:"standup_channel_id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfigSchemaJsonGoombot) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["bot_auth_token"]; raw != nil && !ok {
		return fmt.Errorf("field bot_auth_token in ConfigSchemaJsonGoombot: required")
	}
	if _, ok := raw["guild_id"]; raw != nil && !ok {
		return fmt.Errorf("field guild_id in ConfigSchemaJsonGoombot: required")
	}
	if _, ok := raw["standup_channel_id"]; raw != nil && !ok {
		return fmt.Errorf("field standup_channel_id in ConfigSchemaJsonGoombot: required")
	}
	type Plain ConfigSchemaJsonGoombot
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ConfigSchemaJsonGoombot(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfigSchemaJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["goombis"]; raw != nil && !ok {
		return fmt.Errorf("field goombis in ConfigSchemaJson: required")
	}
	if _, ok := raw["goombot"]; raw != nil && !ok {
		return fmt.Errorf("field goombot in ConfigSchemaJson: required")
	}
	type Plain ConfigSchemaJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ConfigSchemaJson(plain)
	return nil
}
